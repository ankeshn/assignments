INSERT DOCUMENTS:

> use mongo_practice
switched to db mongo_practice
> db.movies.insertMany([
 {
 "title" : "Fight Club",
  "writer" : "Chuck Palahniuko",
  "year" : 1999,
  "actors" : ["Brad Pitt","Edward Norton"]
},{
 "title":"Pulp Fiction",
  "writer":"Quentin Tarantino",
  "year":1994,
  "actors":["John Travolta","Uma Thurman"]
  },{
  "title":"Inglorius Bastards",
  "writer":"Quentin Tarantino",
  "year":2009,
  "actors":["Brad Pitt","Diane Kruger", "Eli Roth"]
  },{
  "title":"The Hobbit: An Unexpected Journey",
  "writer":"J.R.R. Tolkein",
  "year":2012,
  "franchise":"The Hobbit"
  },{
  "title":"The Hobbit: The Desolation of Smaug",
  "writer":"J.R.R. Tolkein",
  "year":2013,
  "franchise":"The Hobbit"
 },{
  "title":"The Hobbit: The Battle of Five Armies",
  "writer":"J.R.R. Tolkein",
  "year":2012,
  "synopsis": "Bilbo and company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."
  },{
  "title":"Pee Wee Herman's Big Adventure"
  },{
  "title":"Avatar"
 }])


QUERY/FIND DOCUMENTS:

1. Get all documents
Ans. db.movies.find()

2. Get all documents with writer set to “Quentin Tarantino”
Ans. db.movies.find({"writer":"Quentin Tarantino"})

3. Get all documents where actors include “Brad Pitt”
Ans. db.movies.find({"actors": "Brad Pitt"}).pretty()

4. Get all documents where franchise is set to “The Hobbit”
Ans. db.movies.find({"franchise":"The Hobbit"}).pretty()

5. Get all the movies released in the 90’s
Ans. db.movies.find({year: {$lt: 2000}}).pretty()

6. Get all the movies release before 2000 or after 2010
Ans. db.movies.find({'$or':[{"year":{'$lt':2000}},{"year":{'$gt':2010}}]}).pretty()


UPDATE DOCUMENTS:

1. Add a Synopsis to “The Hobbit: An Unexpected Journey”
Ans. db.movies.updateOne({$set: {"synopsis": "A reluctant Hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home, and the gold within it from the dragon Smaug."}})

2. Add a synopsis to "The Hobbit: The Desolation of Smaug"
Ans. db.movies.updateOne({$set: {"synopsis": "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}})

3. Add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"
Ans. db.movies.updateOne({"title":"Pulp Fiction"},{$addToSet: { actors: "Samuel L. Jackson" }})

TEXT SEARCH: 

> db.movies.createIndex({synopsis:"text"})
1. find all movies that have a synopsis that contains the word "Bilbo" 
Ans. db.movies.find({$text:{$search:"Bilbo"}}).pretty()

2. find all movies that have a synopsis that contains the word "Gandalf" 
Ans. db.movies.find({$text:{$search:"Gandalf"}}).pretty()

3. find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf" 
Ans. db.movies.find({$text:{$search:'Bilbo -Gandalf'}}).pretty()

4. find all movies that have a synopsis that contains the word "dwarves" or "hobbit" 
Ans. db.movies.find({$or:[{$text:{$search:'dwarves, hobbit'}}]}).pretty()

5. find all movies that have a synopsis that contains the word "gold" and "dragon" 
Ans. db.movies.find({$text:{$search:'gold, dragon'}}).pretty()


DELETE DOCUMENTS: 

1. delete the movie "Pee Wee Herman's Big Adventure" 
Ans. db.movies.remove({"title":"Pee Wee Herman's Big Adventure"})  

2. delete the movie "Avatar" 
Ans. db.movies.remove({"title":"Avatar"})


RELATIONSHIPS:

Insert the following documents into a users collection
> db.users.insertMany([{
"username" : "GoodGuyGreg",
"first_name" : "Good Guy",
"last_name" : "Greg"
},{
"username" : "ScumbagSteve",
"full_name" : {"first" : "Scumbag","last" : "Steve"}
}])


Insert the following documents into a posts collection
> db.posts.insertMany([{
"username" : "GoodGuyGreg",
"title" : "Passes out at party",
"body" : "Wakes up early and cleans house"
},{
"username" : "GoodGuyGreg",
"title" : "Steals your identity",
"body" : "Raises your credit score"
},{
"username" : "GoodGuyGreg",
"title" : "Reports a bug in your code",
"body" : "Sends you a Pull Request"
},{
"username" : "ScumbagSteve",
"title" : "Borrows something",
"body" : "Sells it"
},{
"username" : "ScumbagSteve",
"title" : "Borrows everything",
"body" : "The end"
},{
 "username" : "ScumbagSteve",
"title" : "Forks your repo on github",
"body" : "Sets to private"
}])


Insert the following documents into a comments collection
> db.comments.insertMany([{
"username" : "GoodGuyGreg",
"comment" : "Hope you got a good deal!",
"post" : "5f622c58d333e3be77ecc324"
},{
"username" : "GoodGuyGreg",
"comment" : "What's mine is yours!",
"post" : "5f622c58d333e3be77ecc325"
},{
"username" : "GoodGuyGreg",
"comment" : "Don't violate the licensing agreement!",
"post" : "5f622c58d333e3be77ecc326"
},{
"username" : "ScumbagSteve",
 "comment" : "It still isn't clean",
"post" : "5f622c58d333e3be77ecc321"
}])


QUERYING RELATED COLLECTIONS:
 
1. find all users 
Ans. db.users.find()

2. find all posts 
Ans db.posts.find()

3. find all posts that was authored by "GoodGuyGreg" 
Ans.  db.posts.find({"username":"GoodGuyGreg"})

4. find all posts that was authored by "ScumbagSteve" 
Ans. db.posts.find({"username":"ScumbagSteve"})

5. find all comments 
Ans. db.comments.find()

6. find all comments that was authored by "GoodGuyGreg" 
Ans. db.comments.find({"username":"GoodGuyGreg"})

7. find all comments that was authored by "ScumbagSteve" 
Ans.  db.comments.find({"username":"ScumbagSteve"})
